// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package protogo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Input struct {
	Left                 int64    `protobuf:"varint,1,opt,name=left,proto3" json:"left,omitempty"`
	Right                int64    `protobuf:"varint,2,opt,name=right,proto3" json:"right,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{0}
}

func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetLeft() int64 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *Input) GetRight() int64 {
	if m != nil {
		return m.Right
	}
	return 0
}

type Output struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{1}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Input)(nil), "Input")
	proto.RegisterType((*Output)(nil), "Output")
}

func init() { proto.RegisterFile("calculator.proto", fileDescriptor_c686ea360062a8cf) }

var fileDescriptor_c686ea360062a8cf = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe4, 0x62,
	0xf5, 0xcc, 0x2b, 0x28, 0x2d, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x49, 0x4d, 0x2b, 0x91, 0x60, 0x54,
	0x60, 0xd4, 0x60, 0x0e, 0x02, 0xb3, 0x85, 0x44, 0xb8, 0x58, 0x8b, 0x32, 0xd3, 0x33, 0x4a, 0x24,
	0x98, 0xc0, 0x82, 0x10, 0x8e, 0x92, 0x1c, 0x17, 0x9b, 0x7f, 0x69, 0x09, 0x48, 0x8f, 0x08, 0x17,
	0x6b, 0x59, 0x62, 0x4e, 0x69, 0x2a, 0x54, 0x13, 0x84, 0x63, 0xa4, 0xcc, 0xc5, 0xe9, 0x9c, 0x08,
	0xb5, 0x45, 0x48, 0x8c, 0x8b, 0xd9, 0x31, 0x25, 0x45, 0x88, 0x4d, 0x0f, 0x6c, 0x8b, 0x14, 0xbb,
	0x1e, 0x44, 0xab, 0x13, 0x67, 0x14, 0x3b, 0xd8, 0x01, 0xe9, 0xf9, 0x49, 0x6c, 0x60, 0x86, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x89, 0x4f, 0x0d, 0xee, 0x9d, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CaculatorClient is the client API for Caculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CaculatorClient interface {
	Add(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
}

type caculatorClient struct {
	cc *grpc.ClientConn
}

func NewCaculatorClient(cc *grpc.ClientConn) CaculatorClient {
	return &caculatorClient{cc}
}

func (c *caculatorClient) Add(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/Caculator/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaculatorServer is the server API for Caculator service.
type CaculatorServer interface {
	Add(context.Context, *Input) (*Output, error)
}

func RegisterCaculatorServer(s *grpc.Server, srv CaculatorServer) {
	s.RegisterService(&_Caculator_serviceDesc, srv)
}

func _Caculator_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaculatorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Caculator/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaculatorServer).Add(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

var _Caculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Caculator",
	HandlerType: (*CaculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Caculator_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}
